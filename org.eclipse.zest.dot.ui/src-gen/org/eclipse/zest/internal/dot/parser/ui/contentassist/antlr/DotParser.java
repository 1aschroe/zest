/*
* generated by Xtext
*/
package org.eclipse.zest.internal.dot.parser.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.zest.internal.dot.parser.services.DotGrammarAccess;

public class DotParser extends AbstractContentAssistParser {
	
	@Inject
	private DotGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.zest.internal.dot.parser.ui.contentassist.antlr.internal.InternalDotParser createParser() {
		org.eclipse.zest.internal.dot.parser.ui.contentassist.antlr.internal.InternalDotParser result = new org.eclipse.zest.internal.dot.parser.ui.contentassist.antlr.internal.InternalDotParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStmtAccess().getAlternatives_0(), "rule__Stmt__Alternatives_0");
					put(grammarAccess.getEdgeRhsAccess().getAlternatives(), "rule__EdgeRhs__Alternatives");
					put(grammarAccess.getEdgeOpAccess().getAlternatives(), "rule__EdgeOp__Alternatives");
					put(grammarAccess.getGraphTypeAccess().getAlternatives(), "rule__GraphType__Alternatives");
					put(grammarAccess.getAttributeTypeAccess().getAlternatives(), "rule__AttributeType__Alternatives");
					put(grammarAccess.getCompassPtAccess().getAlternatives(), "rule__CompassPt__Alternatives");
					put(grammarAccess.getMainGraphAccess().getGroup(), "rule__MainGraph__Group__0");
					put(grammarAccess.getStmtAccess().getGroup(), "rule__Stmt__Group__0");
					put(grammarAccess.getEdgeStmtNodeAccess().getGroup(), "rule__EdgeStmtNode__Group__0");
					put(grammarAccess.getEdgeStmtSubgraphAccess().getGroup(), "rule__EdgeStmtSubgraph__Group__0");
					put(grammarAccess.getNodeStmtAccess().getGroup(), "rule__NodeStmt__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getAttrStmtAccess().getGroup(), "rule__AttrStmt__Group__0");
					put(grammarAccess.getAttrListAccess().getGroup(), "rule__AttrList__Group__0");
					put(grammarAccess.getAListAccess().getGroup(), "rule__AList__Group__0");
					put(grammarAccess.getAListAccess().getGroup_1(), "rule__AList__Group_1__0");
					put(grammarAccess.getSubgraphAccess().getGroup(), "rule__Subgraph__Group__0");
					put(grammarAccess.getSubgraphAccess().getGroup_0(), "rule__Subgraph__Group_0__0");
					put(grammarAccess.getEdgeRhsNodeAccess().getGroup(), "rule__EdgeRhsNode__Group__0");
					put(grammarAccess.getEdgeRhsSubgraphAccess().getGroup(), "rule__EdgeRhsSubgraph__Group__0");
					put(grammarAccess.getGraphvizModelAccess().getGraphsAssignment(), "rule__GraphvizModel__GraphsAssignment");
					put(grammarAccess.getMainGraphAccess().getStrictAssignment_0(), "rule__MainGraph__StrictAssignment_0");
					put(grammarAccess.getMainGraphAccess().getTypeAssignment_1(), "rule__MainGraph__TypeAssignment_1");
					put(grammarAccess.getMainGraphAccess().getNameAssignment_2(), "rule__MainGraph__NameAssignment_2");
					put(grammarAccess.getMainGraphAccess().getStmtsAssignment_4(), "rule__MainGraph__StmtsAssignment_4");
					put(grammarAccess.getEdgeStmtNodeAccess().getNode_idAssignment_0(), "rule__EdgeStmtNode__Node_idAssignment_0");
					put(grammarAccess.getEdgeStmtNodeAccess().getEdgeRHSAssignment_1(), "rule__EdgeStmtNode__EdgeRHSAssignment_1");
					put(grammarAccess.getEdgeStmtNodeAccess().getAttributesAssignment_2(), "rule__EdgeStmtNode__AttributesAssignment_2");
					put(grammarAccess.getEdgeStmtSubgraphAccess().getSubgraphAssignment_0(), "rule__EdgeStmtSubgraph__SubgraphAssignment_0");
					put(grammarAccess.getEdgeStmtSubgraphAccess().getEdgeRHSAssignment_1(), "rule__EdgeStmtSubgraph__EdgeRHSAssignment_1");
					put(grammarAccess.getEdgeStmtSubgraphAccess().getAttributesAssignment_2(), "rule__EdgeStmtSubgraph__AttributesAssignment_2");
					put(grammarAccess.getNodeStmtAccess().getNameAssignment_0(), "rule__NodeStmt__NameAssignment_0");
					put(grammarAccess.getNodeStmtAccess().getAttributesAssignment_1(), "rule__NodeStmt__AttributesAssignment_1");
					put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
					put(grammarAccess.getAttributeAccess().getValueAssignment_2(), "rule__Attribute__ValueAssignment_2");
					put(grammarAccess.getAttrStmtAccess().getTypeAssignment_0(), "rule__AttrStmt__TypeAssignment_0");
					put(grammarAccess.getAttrStmtAccess().getAttributesAssignment_1(), "rule__AttrStmt__AttributesAssignment_1");
					put(grammarAccess.getAttrListAccess().getA_listAssignment_1(), "rule__AttrList__A_listAssignment_1");
					put(grammarAccess.getAListAccess().getNameAssignment_0(), "rule__AList__NameAssignment_0");
					put(grammarAccess.getAListAccess().getValueAssignment_1_1(), "rule__AList__ValueAssignment_1_1");
					put(grammarAccess.getSubgraphAccess().getNameAssignment_0_1(), "rule__Subgraph__NameAssignment_0_1");
					put(grammarAccess.getSubgraphAccess().getStmtsAssignment_2(), "rule__Subgraph__StmtsAssignment_2");
					put(grammarAccess.getEdgeRhsNodeAccess().getOpAssignment_0(), "rule__EdgeRhsNode__OpAssignment_0");
					put(grammarAccess.getEdgeRhsNodeAccess().getNodeAssignment_1(), "rule__EdgeRhsNode__NodeAssignment_1");
					put(grammarAccess.getEdgeRhsSubgraphAccess().getOpAssignment_0(), "rule__EdgeRhsSubgraph__OpAssignment_0");
					put(grammarAccess.getEdgeRhsSubgraphAccess().getSubgraphAssignment_1(), "rule__EdgeRhsSubgraph__SubgraphAssignment_1");
					put(grammarAccess.getNodeIdAccess().getNameAssignment(), "rule__NodeId__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.zest.internal.dot.parser.ui.contentassist.antlr.internal.InternalDotParser typedParser = (org.eclipse.zest.internal.dot.parser.ui.contentassist.antlr.internal.InternalDotParser) parser;
			typedParser.entryRuleGraphvizModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DotGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DotGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
