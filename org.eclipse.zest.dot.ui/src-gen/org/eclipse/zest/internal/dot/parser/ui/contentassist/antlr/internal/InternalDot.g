/*
* generated by Xtext
*/
grammar InternalDot;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.zest.internal.dot.parser.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.zest.internal.dot.parser.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.zest.internal.dot.parser.services.DotGrammarAccess;

}

@parser::members {
 
 	private DotGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DotGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleGraphvizModel
entryRuleGraphvizModel 
:
{ before(grammarAccess.getGraphvizModelRule()); }
	 ruleGraphvizModel
{ after(grammarAccess.getGraphvizModelRule()); } 
	 EOF 
;

// Rule GraphvizModel
ruleGraphvizModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGraphvizModelAccess().getGraphsAssignment()); }
(rule__GraphvizModel__GraphsAssignment)*
{ after(grammarAccess.getGraphvizModelAccess().getGraphsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMainGraph
entryRuleMainGraph 
:
{ before(grammarAccess.getMainGraphRule()); }
	 ruleMainGraph
{ after(grammarAccess.getMainGraphRule()); } 
	 EOF 
;

// Rule MainGraph
ruleMainGraph
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMainGraphAccess().getGroup()); }
(rule__MainGraph__Group__0)
{ after(grammarAccess.getMainGraphAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStmt
entryRuleStmt 
:
{ before(grammarAccess.getStmtRule()); }
	 ruleStmt
{ after(grammarAccess.getStmtRule()); } 
	 EOF 
;

// Rule Stmt
ruleStmt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStmtAccess().getGroup()); }
(rule__Stmt__Group__0)
{ after(grammarAccess.getStmtAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEdgeStmtNode
entryRuleEdgeStmtNode 
:
{ before(grammarAccess.getEdgeStmtNodeRule()); }
	 ruleEdgeStmtNode
{ after(grammarAccess.getEdgeStmtNodeRule()); } 
	 EOF 
;

// Rule EdgeStmtNode
ruleEdgeStmtNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getGroup()); }
(rule__EdgeStmtNode__Group__0)
{ after(grammarAccess.getEdgeStmtNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEdgeStmtSubgraph
entryRuleEdgeStmtSubgraph 
:
{ before(grammarAccess.getEdgeStmtSubgraphRule()); }
	 ruleEdgeStmtSubgraph
{ after(grammarAccess.getEdgeStmtSubgraphRule()); } 
	 EOF 
;

// Rule EdgeStmtSubgraph
ruleEdgeStmtSubgraph
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEdgeStmtSubgraphAccess().getGroup()); }
(rule__EdgeStmtSubgraph__Group__0)
{ after(grammarAccess.getEdgeStmtSubgraphAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeStmt
entryRuleNodeStmt 
:
{ before(grammarAccess.getNodeStmtRule()); }
	 ruleNodeStmt
{ after(grammarAccess.getNodeStmtRule()); } 
	 EOF 
;

// Rule NodeStmt
ruleNodeStmt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeStmtAccess().getGroup()); }
(rule__NodeStmt__Group__0)
{ after(grammarAccess.getNodeStmtAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribute
entryRuleAttribute 
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeAccess().getGroup()); }
(rule__Attribute__Group__0)
{ after(grammarAccess.getAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttrStmt
entryRuleAttrStmt 
:
{ before(grammarAccess.getAttrStmtRule()); }
	 ruleAttrStmt
{ after(grammarAccess.getAttrStmtRule()); } 
	 EOF 
;

// Rule AttrStmt
ruleAttrStmt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttrStmtAccess().getGroup()); }
(rule__AttrStmt__Group__0)
{ after(grammarAccess.getAttrStmtAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttrList
entryRuleAttrList 
:
{ before(grammarAccess.getAttrListRule()); }
	 ruleAttrList
{ after(grammarAccess.getAttrListRule()); } 
	 EOF 
;

// Rule AttrList
ruleAttrList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttrListAccess().getGroup()); }
(rule__AttrList__Group__0)
{ after(grammarAccess.getAttrListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAList
entryRuleAList 
:
{ before(grammarAccess.getAListRule()); }
	 ruleAList
{ after(grammarAccess.getAListRule()); } 
	 EOF 
;

// Rule AList
ruleAList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAListAccess().getGroup()); }
(rule__AList__Group__0)
{ after(grammarAccess.getAListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubgraph
entryRuleSubgraph 
:
{ before(grammarAccess.getSubgraphRule()); }
	 ruleSubgraph
{ after(grammarAccess.getSubgraphRule()); } 
	 EOF 
;

// Rule Subgraph
ruleSubgraph
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubgraphAccess().getGroup()); }
(rule__Subgraph__Group__0)
{ after(grammarAccess.getSubgraphAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEdgeRhs
entryRuleEdgeRhs 
:
{ before(grammarAccess.getEdgeRhsRule()); }
	 ruleEdgeRhs
{ after(grammarAccess.getEdgeRhsRule()); } 
	 EOF 
;

// Rule EdgeRhs
ruleEdgeRhs
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEdgeRhsAccess().getAlternatives()); }
(rule__EdgeRhs__Alternatives)
{ after(grammarAccess.getEdgeRhsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEdgeRhsNode
entryRuleEdgeRhsNode 
:
{ before(grammarAccess.getEdgeRhsNodeRule()); }
	 ruleEdgeRhsNode
{ after(grammarAccess.getEdgeRhsNodeRule()); } 
	 EOF 
;

// Rule EdgeRhsNode
ruleEdgeRhsNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEdgeRhsNodeAccess().getGroup()); }
(rule__EdgeRhsNode__Group__0)
{ after(grammarAccess.getEdgeRhsNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEdgeRhsSubgraph
entryRuleEdgeRhsSubgraph 
:
{ before(grammarAccess.getEdgeRhsSubgraphRule()); }
	 ruleEdgeRhsSubgraph
{ after(grammarAccess.getEdgeRhsSubgraphRule()); } 
	 EOF 
;

// Rule EdgeRhsSubgraph
ruleEdgeRhsSubgraph
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEdgeRhsSubgraphAccess().getGroup()); }
(rule__EdgeRhsSubgraph__Group__0)
{ after(grammarAccess.getEdgeRhsSubgraphAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeId
entryRuleNodeId 
:
{ before(grammarAccess.getNodeIdRule()); }
	 ruleNodeId
{ after(grammarAccess.getNodeIdRule()); } 
	 EOF 
;

// Rule NodeId
ruleNodeId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeIdAccess().getNameAssignment()); }
(rule__NodeId__NameAssignment)
{ after(grammarAccess.getNodeIdAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule EdgeOp
ruleEdgeOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeOpAccess().getAlternatives()); }
(rule__EdgeOp__Alternatives)
{ after(grammarAccess.getEdgeOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule GraphType
ruleGraphType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphTypeAccess().getAlternatives()); }
(rule__GraphType__Alternatives)
{ after(grammarAccess.getGraphTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AttributeType
ruleAttributeType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTypeAccess().getAlternatives()); }
(rule__AttributeType__Alternatives)
{ after(grammarAccess.getAttributeTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__Stmt__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getAttributeParserRuleCall_0_0()); }
	ruleAttribute
{ after(grammarAccess.getStmtAccess().getAttributeParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getEdgeStmtNodeParserRuleCall_0_1()); }
	ruleEdgeStmtNode
{ after(grammarAccess.getStmtAccess().getEdgeStmtNodeParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getEdgeStmtSubgraphParserRuleCall_0_2()); }
	ruleEdgeStmtSubgraph
{ after(grammarAccess.getStmtAccess().getEdgeStmtSubgraphParserRuleCall_0_2()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getNodeStmtParserRuleCall_0_3()); }
	ruleNodeStmt
{ after(grammarAccess.getStmtAccess().getNodeStmtParserRuleCall_0_3()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getAttrStmtParserRuleCall_0_4()); }
	ruleAttrStmt
{ after(grammarAccess.getStmtAccess().getAttrStmtParserRuleCall_0_4()); }
)

    |(
{ before(grammarAccess.getStmtAccess().getSubgraphParserRuleCall_0_5()); }
	ruleSubgraph
{ after(grammarAccess.getStmtAccess().getSubgraphParserRuleCall_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhs__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsAccess().getEdgeRhsNodeParserRuleCall_0()); }
	ruleEdgeRhsNode
{ after(grammarAccess.getEdgeRhsAccess().getEdgeRhsNodeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEdgeRhsAccess().getEdgeRhsSubgraphParserRuleCall_1()); }
	ruleEdgeRhsSubgraph
{ after(grammarAccess.getEdgeRhsAccess().getEdgeRhsSubgraphParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeOpAccess().getDirectedEnumLiteralDeclaration_0()); }
(	'->' 
)
{ after(grammarAccess.getEdgeOpAccess().getDirectedEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getEdgeOpAccess().getUndirectedEnumLiteralDeclaration_1()); }
(	'--' 
)
{ after(grammarAccess.getEdgeOpAccess().getUndirectedEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GraphType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphTypeAccess().getGraphEnumLiteralDeclaration_0()); }
(	'graph' 
)
{ after(grammarAccess.getGraphTypeAccess().getGraphEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getGraphTypeAccess().getDigraphEnumLiteralDeclaration_1()); }
(	'digraph' 
)
{ after(grammarAccess.getGraphTypeAccess().getDigraphEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeTypeAccess().getGraphEnumLiteralDeclaration_0()); }
(	'graph' 
)
{ after(grammarAccess.getAttributeTypeAccess().getGraphEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getNodeEnumLiteralDeclaration_1()); }
(	'node' 
)
{ after(grammarAccess.getAttributeTypeAccess().getNodeEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAttributeTypeAccess().getEdgeEnumLiteralDeclaration_2()); }
(	'edge' 
)
{ after(grammarAccess.getAttributeTypeAccess().getEdgeEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__MainGraph__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MainGraph__Group__0__Impl
	rule__MainGraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MainGraph__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainGraphAccess().getStrictAssignment_0()); }
(rule__MainGraph__StrictAssignment_0)?
{ after(grammarAccess.getMainGraphAccess().getStrictAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MainGraph__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MainGraph__Group__1__Impl
	rule__MainGraph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MainGraph__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainGraphAccess().getTypeAssignment_1()); }
(rule__MainGraph__TypeAssignment_1)
{ after(grammarAccess.getMainGraphAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MainGraph__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MainGraph__Group__2__Impl
	rule__MainGraph__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MainGraph__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainGraphAccess().getNameAssignment_2()); }
(rule__MainGraph__NameAssignment_2)?
{ after(grammarAccess.getMainGraphAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MainGraph__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MainGraph__Group__3__Impl
	rule__MainGraph__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MainGraph__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainGraphAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getMainGraphAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MainGraph__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MainGraph__Group__4__Impl
	rule__MainGraph__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MainGraph__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainGraphAccess().getStmtsAssignment_4()); }
(rule__MainGraph__StmtsAssignment_4)*
{ after(grammarAccess.getMainGraphAccess().getStmtsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MainGraph__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MainGraph__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MainGraph__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainGraphAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getMainGraphAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Stmt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stmt__Group__0__Impl
	rule__Stmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getAlternatives_0()); }
(rule__Stmt__Alternatives_0)
{ after(grammarAccess.getStmtAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Stmt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stmt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStmtAccess().getSemicolonKeyword_1()); }
(
	';' 
)?
{ after(grammarAccess.getStmtAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EdgeStmtNode__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeStmtNode__Group__0__Impl
	rule__EdgeStmtNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtNode__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getNode_idAssignment_0()); }
(rule__EdgeStmtNode__Node_idAssignment_0)
{ after(grammarAccess.getEdgeStmtNodeAccess().getNode_idAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeStmtNode__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeStmtNode__Group__1__Impl
	rule__EdgeStmtNode__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtNode__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getEdgeRHSAssignment_1()); }
(rule__EdgeStmtNode__EdgeRHSAssignment_1)
{ after(grammarAccess.getEdgeStmtNodeAccess().getEdgeRHSAssignment_1()); }
)
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getEdgeRHSAssignment_1()); }
(rule__EdgeStmtNode__EdgeRHSAssignment_1)*
{ after(grammarAccess.getEdgeStmtNodeAccess().getEdgeRHSAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeStmtNode__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeStmtNode__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtNode__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getAttributesAssignment_2()); }
(rule__EdgeStmtNode__AttributesAssignment_2)*
{ after(grammarAccess.getEdgeStmtNodeAccess().getAttributesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EdgeStmtSubgraph__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeStmtSubgraph__Group__0__Impl
	rule__EdgeStmtSubgraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtSubgraph__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeStmtSubgraphAccess().getSubgraphAssignment_0()); }
(rule__EdgeStmtSubgraph__SubgraphAssignment_0)
{ after(grammarAccess.getEdgeStmtSubgraphAccess().getSubgraphAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeStmtSubgraph__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeStmtSubgraph__Group__1__Impl
	rule__EdgeStmtSubgraph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtSubgraph__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getEdgeStmtSubgraphAccess().getEdgeRHSAssignment_1()); }
(rule__EdgeStmtSubgraph__EdgeRHSAssignment_1)
{ after(grammarAccess.getEdgeStmtSubgraphAccess().getEdgeRHSAssignment_1()); }
)
(
{ before(grammarAccess.getEdgeStmtSubgraphAccess().getEdgeRHSAssignment_1()); }
(rule__EdgeStmtSubgraph__EdgeRHSAssignment_1)*
{ after(grammarAccess.getEdgeStmtSubgraphAccess().getEdgeRHSAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeStmtSubgraph__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeStmtSubgraph__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtSubgraph__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeStmtSubgraphAccess().getAttributesAssignment_2()); }
(rule__EdgeStmtSubgraph__AttributesAssignment_2)*
{ after(grammarAccess.getEdgeStmtSubgraphAccess().getAttributesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NodeStmt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeStmt__Group__0__Impl
	rule__NodeStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeStmt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeStmtAccess().getNameAssignment_0()); }
(rule__NodeStmt__NameAssignment_0)
{ after(grammarAccess.getNodeStmtAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeStmt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeStmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeStmt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeStmtAccess().getAttributesAssignment_1()); }
(rule__NodeStmt__AttributesAssignment_1)*
{ after(grammarAccess.getNodeStmtAccess().getAttributesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Attribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
(rule__Attribute__NameAssignment_0)
{ after(grammarAccess.getAttributeAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getAttributeAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getValueAssignment_2()); }
(rule__Attribute__ValueAssignment_2)
{ after(grammarAccess.getAttributeAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AttrStmt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttrStmt__Group__0__Impl
	rule__AttrStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrStmt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrStmtAccess().getTypeAssignment_0()); }
(rule__AttrStmt__TypeAssignment_0)
{ after(grammarAccess.getAttrStmtAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttrStmt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttrStmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrStmt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAttrStmtAccess().getAttributesAssignment_1()); }
(rule__AttrStmt__AttributesAssignment_1)
{ after(grammarAccess.getAttrStmtAccess().getAttributesAssignment_1()); }
)
(
{ before(grammarAccess.getAttrStmtAccess().getAttributesAssignment_1()); }
(rule__AttrStmt__AttributesAssignment_1)*
{ after(grammarAccess.getAttrStmtAccess().getAttributesAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttrList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttrList__Group__0__Impl
	rule__AttrList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrListAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getAttrListAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttrList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttrList__Group__1__Impl
	rule__AttrList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrListAccess().getA_listAssignment_1()); }
(rule__AttrList__A_listAssignment_1)*
{ after(grammarAccess.getAttrListAccess().getA_listAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttrList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttrList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrListAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getAttrListAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AList__Group__0__Impl
	rule__AList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAListAccess().getNameAssignment_0()); }
(rule__AList__NameAssignment_0)
{ after(grammarAccess.getAListAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AList__Group__1__Impl
	rule__AList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAListAccess().getGroup_1()); }
(rule__AList__Group_1__0)?
{ after(grammarAccess.getAListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAListAccess().getCommaKeyword_2()); }
(
	',' 
)?
{ after(grammarAccess.getAListAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AList__Group_1__0__Impl
	rule__AList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAListAccess().getEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getAListAccess().getEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAListAccess().getValueAssignment_1_1()); }
(rule__AList__ValueAssignment_1_1)
{ after(grammarAccess.getAListAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Subgraph__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group__0__Impl
	rule__Subgraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getGroup_0()); }
(rule__Subgraph__Group_0__0)?
{ after(grammarAccess.getSubgraphAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subgraph__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group__1__Impl
	rule__Subgraph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getSubgraphAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subgraph__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group__2__Impl
	rule__Subgraph__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getStmtsAssignment_2()); }
(rule__Subgraph__StmtsAssignment_2)*
{ after(grammarAccess.getSubgraphAccess().getStmtsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subgraph__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getSubgraphAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Subgraph__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group_0__0__Impl
	rule__Subgraph__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getSubgraphKeyword_0_0()); }

	'subgraph' 

{ after(grammarAccess.getSubgraphAccess().getSubgraphKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Subgraph__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Subgraph__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getNameAssignment_0_1()); }
(rule__Subgraph__NameAssignment_0_1)?
{ after(grammarAccess.getSubgraphAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EdgeRhsNode__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeRhsNode__Group__0__Impl
	rule__EdgeRhsNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsNode__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsNodeAccess().getOpAssignment_0()); }
(rule__EdgeRhsNode__OpAssignment_0)
{ after(grammarAccess.getEdgeRhsNodeAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeRhsNode__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeRhsNode__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsNode__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsNodeAccess().getNodeAssignment_1()); }
(rule__EdgeRhsNode__NodeAssignment_1)
{ after(grammarAccess.getEdgeRhsNodeAccess().getNodeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EdgeRhsSubgraph__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeRhsSubgraph__Group__0__Impl
	rule__EdgeRhsSubgraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsSubgraph__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsSubgraphAccess().getOpAssignment_0()); }
(rule__EdgeRhsSubgraph__OpAssignment_0)
{ after(grammarAccess.getEdgeRhsSubgraphAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeRhsSubgraph__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeRhsSubgraph__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsSubgraph__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsSubgraphAccess().getSubgraphAssignment_1()); }
(rule__EdgeRhsSubgraph__SubgraphAssignment_1)
{ after(grammarAccess.getEdgeRhsSubgraphAccess().getSubgraphAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__GraphvizModel__GraphsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGraphvizModelAccess().getGraphsMainGraphParserRuleCall_0()); }
	ruleMainGraph{ after(grammarAccess.getGraphvizModelAccess().getGraphsMainGraphParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MainGraph__StrictAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainGraphAccess().getStrictStrictKeyword_0_0()); }
(
{ before(grammarAccess.getMainGraphAccess().getStrictStrictKeyword_0_0()); }

	'strict' 

{ after(grammarAccess.getMainGraphAccess().getStrictStrictKeyword_0_0()); }
)

{ after(grammarAccess.getMainGraphAccess().getStrictStrictKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MainGraph__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainGraphAccess().getTypeGraphTypeEnumRuleCall_1_0()); }
	ruleGraphType{ after(grammarAccess.getMainGraphAccess().getTypeGraphTypeEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MainGraph__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainGraphAccess().getNameDOT_IDTerminalRuleCall_2_0()); }
	RULE_DOT_ID{ after(grammarAccess.getMainGraphAccess().getNameDOT_IDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MainGraph__StmtsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainGraphAccess().getStmtsStmtParserRuleCall_4_0()); }
	ruleStmt{ after(grammarAccess.getMainGraphAccess().getStmtsStmtParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtNode__Node_idAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getNode_idNodeIdParserRuleCall_0_0()); }
	ruleNodeId{ after(grammarAccess.getEdgeStmtNodeAccess().getNode_idNodeIdParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtNode__EdgeRHSAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getEdgeRHSEdgeRhsParserRuleCall_1_0()); }
	ruleEdgeRhs{ after(grammarAccess.getEdgeStmtNodeAccess().getEdgeRHSEdgeRhsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtNode__AttributesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeStmtNodeAccess().getAttributesAttrListParserRuleCall_2_0()); }
	ruleAttrList{ after(grammarAccess.getEdgeStmtNodeAccess().getAttributesAttrListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtSubgraph__SubgraphAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeStmtSubgraphAccess().getSubgraphSubgraphParserRuleCall_0_0()); }
	ruleSubgraph{ after(grammarAccess.getEdgeStmtSubgraphAccess().getSubgraphSubgraphParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtSubgraph__EdgeRHSAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeStmtSubgraphAccess().getEdgeRHSEdgeRhsParserRuleCall_1_0()); }
	ruleEdgeRhs{ after(grammarAccess.getEdgeStmtSubgraphAccess().getEdgeRHSEdgeRhsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeStmtSubgraph__AttributesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeStmtSubgraphAccess().getAttributesAttrListParserRuleCall_2_0()); }
	ruleAttrList{ after(grammarAccess.getEdgeStmtSubgraphAccess().getAttributesAttrListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeStmt__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeStmtAccess().getNameDOT_IDTerminalRuleCall_0_0()); }
	RULE_DOT_ID{ after(grammarAccess.getNodeStmtAccess().getNameDOT_IDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeStmt__AttributesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeStmtAccess().getAttributesAttrListParserRuleCall_1_0()); }
	ruleAttrList{ after(grammarAccess.getNodeStmtAccess().getAttributesAttrListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameDOT_IDTerminalRuleCall_0_0()); }
	RULE_DOT_ID{ after(grammarAccess.getAttributeAccess().getNameDOT_IDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getValueDOT_IDTerminalRuleCall_2_0()); }
	RULE_DOT_ID{ after(grammarAccess.getAttributeAccess().getValueDOT_IDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttrStmt__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrStmtAccess().getTypeAttributeTypeEnumRuleCall_0_0()); }
	ruleAttributeType{ after(grammarAccess.getAttrStmtAccess().getTypeAttributeTypeEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttrStmt__AttributesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrStmtAccess().getAttributesAttrListParserRuleCall_1_0()); }
	ruleAttrList{ after(grammarAccess.getAttrStmtAccess().getAttributesAttrListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttrList__A_listAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttrListAccess().getA_listAListParserRuleCall_1_0()); }
	ruleAList{ after(grammarAccess.getAttrListAccess().getA_listAListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AList__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAListAccess().getNameDOT_IDTerminalRuleCall_0_0()); }
	RULE_DOT_ID{ after(grammarAccess.getAListAccess().getNameDOT_IDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AList__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAListAccess().getValueDOT_IDTerminalRuleCall_1_1_0()); }
	RULE_DOT_ID{ after(grammarAccess.getAListAccess().getValueDOT_IDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getNameDOT_IDTerminalRuleCall_0_1_0()); }
	RULE_DOT_ID{ after(grammarAccess.getSubgraphAccess().getNameDOT_IDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Subgraph__StmtsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubgraphAccess().getStmtsStmtParserRuleCall_2_0()); }
	ruleStmt{ after(grammarAccess.getSubgraphAccess().getStmtsStmtParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsNode__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsNodeAccess().getOpEdgeOpEnumRuleCall_0_0()); }
	ruleEdgeOp{ after(grammarAccess.getEdgeRhsNodeAccess().getOpEdgeOpEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsNode__NodeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsNodeAccess().getNodeNodeIdParserRuleCall_1_0()); }
	ruleNodeId{ after(grammarAccess.getEdgeRhsNodeAccess().getNodeNodeIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsSubgraph__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsSubgraphAccess().getOpEdgeOpEnumRuleCall_0_0()); }
	ruleEdgeOp{ after(grammarAccess.getEdgeRhsSubgraphAccess().getOpEdgeOpEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeRhsSubgraph__SubgraphAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeRhsSubgraphAccess().getSubgraphSubgraphParserRuleCall_1_0()); }
	ruleSubgraph{ after(grammarAccess.getEdgeRhsSubgraphAccess().getSubgraphSubgraphParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeId__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeIdAccess().getNameDOT_IDTerminalRuleCall_0()); }
	RULE_DOT_ID{ after(grammarAccess.getNodeIdAccess().getNameDOT_IDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DOT_ID : ('^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*|'"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~('"'))* '"'|'-'? ('.' ('0'..'9')+|('0'..'9')+ ('.' ('0'..'9')*)?));

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


