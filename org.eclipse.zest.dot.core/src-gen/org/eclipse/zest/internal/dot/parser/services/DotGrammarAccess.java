/*
* generated by Xtext
*/

package org.eclipse.zest.internal.dot.parser.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DotGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class GraphvizModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GraphvizModel");
		private final Assignment cGraphsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGraphsMainGraphParserRuleCall_0 = (RuleCall)cGraphsAssignment.eContents().get(0);
		
		//GraphvizModel:
		//	graphs+=MainGraph*;
		public ParserRule getRule() { return rule; }

		//graphs+=MainGraph*
		public Assignment getGraphsAssignment() { return cGraphsAssignment; }

		//MainGraph
		public RuleCall getGraphsMainGraphParserRuleCall_0() { return cGraphsMainGraphParserRuleCall_0; }
	}

	public class MainGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainGraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStrictAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStrictStrictKeyword_0_0 = (Keyword)cStrictAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeGraphTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameDOT_IDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStmtsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStmtsStmtParserRuleCall_4_0 = (RuleCall)cStmtsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MainGraph:
		//	strict?="strict"? type=GraphType name=DOT_ID? "{" stmts+=Stmt* "}";
		public ParserRule getRule() { return rule; }

		//strict?="strict"? type=GraphType name=DOT_ID? "{" stmts+=Stmt* "}"
		public Group getGroup() { return cGroup; }

		//strict?="strict"?
		public Assignment getStrictAssignment_0() { return cStrictAssignment_0; }

		//"strict"
		public Keyword getStrictStrictKeyword_0_0() { return cStrictStrictKeyword_0_0; }

		//type=GraphType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//GraphType
		public RuleCall getTypeGraphTypeEnumRuleCall_1_0() { return cTypeGraphTypeEnumRuleCall_1_0; }

		//name=DOT_ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//DOT_ID
		public RuleCall getNameDOT_IDTerminalRuleCall_2_0() { return cNameDOT_IDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//stmts+=Stmt*
		public Assignment getStmtsAssignment_4() { return cStmtsAssignment_4; }

		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_4_0() { return cStmtsStmtParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class StmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAttributeParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cEdgeStmtNodeParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cEdgeStmtSubgraphParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cNodeStmtParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cAttrStmtParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cSubgraphParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Stmt:
		//	(Attribute | EdgeStmtNode | EdgeStmtSubgraph | NodeStmt | AttrStmt | Subgraph) ";"?;
		public ParserRule getRule() { return rule; }

		//(Attribute | EdgeStmtNode | EdgeStmtSubgraph | NodeStmt | AttrStmt | Subgraph) ";"?
		public Group getGroup() { return cGroup; }

		//Attribute | EdgeStmtNode | EdgeStmtSubgraph | NodeStmt | AttrStmt | Subgraph
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0_0() { return cAttributeParserRuleCall_0_0; }

		//EdgeStmtNode
		public RuleCall getEdgeStmtNodeParserRuleCall_0_1() { return cEdgeStmtNodeParserRuleCall_0_1; }

		//EdgeStmtSubgraph
		public RuleCall getEdgeStmtSubgraphParserRuleCall_0_2() { return cEdgeStmtSubgraphParserRuleCall_0_2; }

		//NodeStmt
		public RuleCall getNodeStmtParserRuleCall_0_3() { return cNodeStmtParserRuleCall_0_3; }

		//AttrStmt
		public RuleCall getAttrStmtParserRuleCall_0_4() { return cAttrStmtParserRuleCall_0_4; }

		//Subgraph
		public RuleCall getSubgraphParserRuleCall_0_5() { return cSubgraphParserRuleCall_0_5; }

		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class EdgeStmtNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeStmtNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNode_idAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNode_idNodeIdParserRuleCall_0_0 = (RuleCall)cNode_idAssignment_0.eContents().get(0);
		private final Assignment cEdgeRHSAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEdgeRHSEdgeRhsParserRuleCall_1_0 = (RuleCall)cEdgeRHSAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttrListParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		
		//EdgeStmtNode:
		//	node_id=NodeId edgeRHS+=EdgeRhs+ attributes+=AttrList*;
		public ParserRule getRule() { return rule; }

		//node_id=NodeId edgeRHS+=EdgeRhs+ attributes+=AttrList*
		public Group getGroup() { return cGroup; }

		//node_id=NodeId
		public Assignment getNode_idAssignment_0() { return cNode_idAssignment_0; }

		//NodeId
		public RuleCall getNode_idNodeIdParserRuleCall_0_0() { return cNode_idNodeIdParserRuleCall_0_0; }

		//edgeRHS+=EdgeRhs+
		public Assignment getEdgeRHSAssignment_1() { return cEdgeRHSAssignment_1; }

		//EdgeRhs
		public RuleCall getEdgeRHSEdgeRhsParserRuleCall_1_0() { return cEdgeRHSEdgeRhsParserRuleCall_1_0; }

		//attributes+=AttrList*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//AttrList
		public RuleCall getAttributesAttrListParserRuleCall_2_0() { return cAttributesAttrListParserRuleCall_2_0; }
	}

	public class EdgeStmtSubgraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeStmtSubgraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubgraphAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubgraphSubgraphParserRuleCall_0_0 = (RuleCall)cSubgraphAssignment_0.eContents().get(0);
		private final Assignment cEdgeRHSAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEdgeRHSEdgeRhsParserRuleCall_1_0 = (RuleCall)cEdgeRHSAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttrListParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		
		//EdgeStmtSubgraph:
		//	subgraph=Subgraph edgeRHS=EdgeRhs+ attributes+=AttrList*;
		public ParserRule getRule() { return rule; }

		//subgraph=Subgraph edgeRHS=EdgeRhs+ attributes+=AttrList*
		public Group getGroup() { return cGroup; }

		//subgraph=Subgraph
		public Assignment getSubgraphAssignment_0() { return cSubgraphAssignment_0; }

		//Subgraph
		public RuleCall getSubgraphSubgraphParserRuleCall_0_0() { return cSubgraphSubgraphParserRuleCall_0_0; }

		//edgeRHS=EdgeRhs+
		public Assignment getEdgeRHSAssignment_1() { return cEdgeRHSAssignment_1; }

		//EdgeRhs
		public RuleCall getEdgeRHSEdgeRhsParserRuleCall_1_0() { return cEdgeRHSEdgeRhsParserRuleCall_1_0; }

		//attributes+=AttrList*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//AttrList
		public RuleCall getAttributesAttrListParserRuleCall_2_0() { return cAttributesAttrListParserRuleCall_2_0; }
	}

	public class NodeStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDOT_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttrListParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		
		//NodeStmt:
		//	name=DOT_ID attributes+=AttrList*;
		public ParserRule getRule() { return rule; }

		//name=DOT_ID attributes+=AttrList*
		public Group getGroup() { return cGroup; }

		//name=DOT_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//DOT_ID
		public RuleCall getNameDOT_IDTerminalRuleCall_0_0() { return cNameDOT_IDTerminalRuleCall_0_0; }

		//attributes+=AttrList*
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//AttrList
		public RuleCall getAttributesAttrListParserRuleCall_1_0() { return cAttributesAttrListParserRuleCall_1_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDOT_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDOT_IDTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		////NodeStmt     :  name=DOT_ID (port=Port)? (attributes+=AttrList)*; // see FIXME for port
		//Attribute:
		//	name=DOT_ID "=" value=DOT_ID;
		public ParserRule getRule() { return rule; }

		//name=DOT_ID "=" value=DOT_ID
		public Group getGroup() { return cGroup; }

		//name=DOT_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//DOT_ID
		public RuleCall getNameDOT_IDTerminalRuleCall_0_0() { return cNameDOT_IDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=DOT_ID
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//DOT_ID
		public RuleCall getValueDOT_IDTerminalRuleCall_2_0() { return cValueDOT_IDTerminalRuleCall_2_0; }
	}

	public class AttrStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttrStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeAttributeTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttrListParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		
		//AttrStmt:
		//	type=AttributeType attributes+=AttrList+;
		public ParserRule getRule() { return rule; }

		//type=AttributeType attributes+=AttrList+
		public Group getGroup() { return cGroup; }

		//type=AttributeType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//AttributeType
		public RuleCall getTypeAttributeTypeEnumRuleCall_0_0() { return cTypeAttributeTypeEnumRuleCall_0_0; }

		//attributes+=AttrList+
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//AttrList
		public RuleCall getAttributesAttrListParserRuleCall_1_0() { return cAttributesAttrListParserRuleCall_1_0; }
	}

	public class AttrListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttrList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cA_listAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cA_listAListParserRuleCall_1_0 = (RuleCall)cA_listAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AttrList:
		//	"[" a_list+=AList* "]";
		public ParserRule getRule() { return rule; }

		//"[" a_list+=AList* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//a_list+=AList*
		public Assignment getA_listAssignment_1() { return cA_listAssignment_1; }

		//AList
		public RuleCall getA_listAListParserRuleCall_1_0() { return cA_listAListParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class AListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameDOT_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueDOT_IDTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AList:
		//	name=DOT_ID ("=" value=DOT_ID)? ","?;
		public ParserRule getRule() { return rule; }

		//name=DOT_ID ("=" value=DOT_ID)? ","?
		public Group getGroup() { return cGroup; }

		//name=DOT_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//DOT_ID
		public RuleCall getNameDOT_IDTerminalRuleCall_0_0() { return cNameDOT_IDTerminalRuleCall_0_0; }

		//("=" value=DOT_ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//value=DOT_ID
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//DOT_ID
		public RuleCall getValueDOT_IDTerminalRuleCall_1_1_0() { return cValueDOT_IDTerminalRuleCall_1_1_0; }

		//","?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
	}

	public class SubgraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subgraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cSubgraphKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameDOT_IDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStmtsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStmtsStmtParserRuleCall_2_0 = (RuleCall)cStmtsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Subgraph:
		//	("subgraph" name=DOT_ID?)? "{" stmts+=Stmt* "}";
		public ParserRule getRule() { return rule; }

		//("subgraph" name=DOT_ID?)? "{" stmts+=Stmt* "}"
		public Group getGroup() { return cGroup; }

		//("subgraph" name=DOT_ID?)?
		public Group getGroup_0() { return cGroup_0; }

		//"subgraph"
		public Keyword getSubgraphKeyword_0_0() { return cSubgraphKeyword_0_0; }

		//name=DOT_ID?
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//DOT_ID
		public RuleCall getNameDOT_IDTerminalRuleCall_0_1_0() { return cNameDOT_IDTerminalRuleCall_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//stmts+=Stmt*
		public Assignment getStmtsAssignment_2() { return cStmtsAssignment_2; }

		//Stmt
		public RuleCall getStmtsStmtParserRuleCall_2_0() { return cStmtsStmtParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class EdgeRhsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeRhs");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEdgeRhsNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEdgeRhsSubgraphParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////FIXME: Generated portImpl class has compilation errors with Helios Xtext
		////Port : ":" name=DOT_ID ( ":" compass_pt=CompassPt )? | ":" compass_pt=CompassPt;
		//EdgeRhs:
		//	EdgeRhsNode | EdgeRhsSubgraph;
		public ParserRule getRule() { return rule; }

		//EdgeRhsNode | EdgeRhsSubgraph
		public Alternatives getAlternatives() { return cAlternatives; }

		//EdgeRhsNode
		public RuleCall getEdgeRhsNodeParserRuleCall_0() { return cEdgeRhsNodeParserRuleCall_0; }

		//EdgeRhsSubgraph
		public RuleCall getEdgeRhsSubgraphParserRuleCall_1() { return cEdgeRhsSubgraphParserRuleCall_1; }
	}

	public class EdgeRhsNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeRhsNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpEdgeOpEnumRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cNodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodeNodeIdParserRuleCall_1_0 = (RuleCall)cNodeAssignment_1.eContents().get(0);
		
		//EdgeRhsNode:
		//	op=EdgeOp node=NodeId;
		public ParserRule getRule() { return rule; }

		//op=EdgeOp node=NodeId
		public Group getGroup() { return cGroup; }

		//op=EdgeOp
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//EdgeOp
		public RuleCall getOpEdgeOpEnumRuleCall_0_0() { return cOpEdgeOpEnumRuleCall_0_0; }

		//node=NodeId
		public Assignment getNodeAssignment_1() { return cNodeAssignment_1; }

		//NodeId
		public RuleCall getNodeNodeIdParserRuleCall_1_0() { return cNodeNodeIdParserRuleCall_1_0; }
	}

	public class EdgeRhsSubgraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeRhsSubgraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpEdgeOpEnumRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cSubgraphAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubgraphSubgraphParserRuleCall_1_0 = (RuleCall)cSubgraphAssignment_1.eContents().get(0);
		
		//EdgeRhsSubgraph:
		//	op=EdgeOp subgraph=Subgraph;
		public ParserRule getRule() { return rule; }

		//op=EdgeOp subgraph=Subgraph
		public Group getGroup() { return cGroup; }

		//op=EdgeOp
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//EdgeOp
		public RuleCall getOpEdgeOpEnumRuleCall_0_0() { return cOpEdgeOpEnumRuleCall_0_0; }

		//subgraph=Subgraph
		public Assignment getSubgraphAssignment_1() { return cSubgraphAssignment_1; }

		//Subgraph
		public RuleCall getSubgraphSubgraphParserRuleCall_1_0() { return cSubgraphSubgraphParserRuleCall_1_0; }
	}

	public class NodeIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeId");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameDOT_IDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////NodeId  : name=DOT_ID (port=Port)?; // see FIXME for port
		//NodeId:
		//	name=DOT_ID;
		public ParserRule getRule() { return rule; }

		//name=DOT_ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//DOT_ID
		public RuleCall getNameDOT_IDTerminalRuleCall_0() { return cNameDOT_IDTerminalRuleCall_0; }
	}
	
	
	public class EdgeOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDirectedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDirectedHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cDirectedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUndirectedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUndirectedHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cUndirectedEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EdgeOp:
		//	directed="->" | undirected="--";
		public EnumRule getRule() { return rule; }

		//directed="->" | undirected="--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//directed="->"
		public EnumLiteralDeclaration getDirectedEnumLiteralDeclaration_0() { return cDirectedEnumLiteralDeclaration_0; }

		//"->"
		public Keyword getDirectedHyphenMinusGreaterThanSignKeyword_0_0() { return cDirectedHyphenMinusGreaterThanSignKeyword_0_0; }

		//undirected="--"
		public EnumLiteralDeclaration getUndirectedEnumLiteralDeclaration_1() { return cUndirectedEnumLiteralDeclaration_1; }

		//"--"
		public Keyword getUndirectedHyphenMinusHyphenMinusKeyword_1_0() { return cUndirectedHyphenMinusHyphenMinusKeyword_1_0; }
	}

	public class GraphTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "GraphType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGraphEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGraphGraphKeyword_0_0 = (Keyword)cGraphEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDigraphEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDigraphDigraphKeyword_1_0 = (Keyword)cDigraphEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum GraphType:
		//	graph | digraph;
		public EnumRule getRule() { return rule; }

		//graph | digraph
		public Alternatives getAlternatives() { return cAlternatives; }

		//graph
		public EnumLiteralDeclaration getGraphEnumLiteralDeclaration_0() { return cGraphEnumLiteralDeclaration_0; }

		//"graph"
		public Keyword getGraphGraphKeyword_0_0() { return cGraphGraphKeyword_0_0; }

		//digraph
		public EnumLiteralDeclaration getDigraphEnumLiteralDeclaration_1() { return cDigraphEnumLiteralDeclaration_1; }

		//"digraph"
		public Keyword getDigraphDigraphKeyword_1_0() { return cDigraphDigraphKeyword_1_0; }
	}

	public class AttributeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGraphEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGraphGraphKeyword_0_0 = (Keyword)cGraphEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNodeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNodeNodeKeyword_1_0 = (Keyword)cNodeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEdgeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEdgeEdgeKeyword_2_0 = (Keyword)cEdgeEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AttributeType:
		//	graph | node | edge;
		public EnumRule getRule() { return rule; }

		//graph | node | edge
		public Alternatives getAlternatives() { return cAlternatives; }

		//graph
		public EnumLiteralDeclaration getGraphEnumLiteralDeclaration_0() { return cGraphEnumLiteralDeclaration_0; }

		//"graph"
		public Keyword getGraphGraphKeyword_0_0() { return cGraphGraphKeyword_0_0; }

		//node
		public EnumLiteralDeclaration getNodeEnumLiteralDeclaration_1() { return cNodeEnumLiteralDeclaration_1; }

		//"node"
		public Keyword getNodeNodeKeyword_1_0() { return cNodeNodeKeyword_1_0; }

		//edge
		public EnumLiteralDeclaration getEdgeEnumLiteralDeclaration_2() { return cEdgeEnumLiteralDeclaration_2; }

		//"edge"
		public Keyword getEdgeEdgeKeyword_2_0() { return cEdgeEdgeKeyword_2_0; }
	}

	public class CompassPtElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CompassPt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNorthEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNorthNKeyword_0_0 = (Keyword)cNorthEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNortheastEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNortheastNeKeyword_1_0 = (Keyword)cNortheastEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEastEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEastEKeyword_2_0 = (Keyword)cEastEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSoutheastEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSoutheastSeKeyword_3_0 = (Keyword)cSoutheastEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSouthEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSouthSKeyword_4_0 = (Keyword)cSouthEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSouthwestEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSouthwestSwKeyword_5_0 = (Keyword)cSouthwestEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cWestEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cWestWKeyword_6_0 = (Keyword)cWestEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cNorthwestEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cNorthwestNwKeyword_7_0 = (Keyword)cNorthwestEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum CompassPt:
		//	north="n" | northeast="ne" | east="e" | southeast="se" | south="s" | southwest="sw" | west="w" | northwest="nw";
		public EnumRule getRule() { return rule; }

		//north="n" | northeast="ne" | east="e" | southeast="se" | south="s" | southwest="sw" | west="w" | northwest="nw"
		public Alternatives getAlternatives() { return cAlternatives; }

		//north="n"
		public EnumLiteralDeclaration getNorthEnumLiteralDeclaration_0() { return cNorthEnumLiteralDeclaration_0; }

		//"n"
		public Keyword getNorthNKeyword_0_0() { return cNorthNKeyword_0_0; }

		//northeast="ne"
		public EnumLiteralDeclaration getNortheastEnumLiteralDeclaration_1() { return cNortheastEnumLiteralDeclaration_1; }

		//"ne"
		public Keyword getNortheastNeKeyword_1_0() { return cNortheastNeKeyword_1_0; }

		//east="e"
		public EnumLiteralDeclaration getEastEnumLiteralDeclaration_2() { return cEastEnumLiteralDeclaration_2; }

		//"e"
		public Keyword getEastEKeyword_2_0() { return cEastEKeyword_2_0; }

		//southeast="se"
		public EnumLiteralDeclaration getSoutheastEnumLiteralDeclaration_3() { return cSoutheastEnumLiteralDeclaration_3; }

		//"se"
		public Keyword getSoutheastSeKeyword_3_0() { return cSoutheastSeKeyword_3_0; }

		//south="s"
		public EnumLiteralDeclaration getSouthEnumLiteralDeclaration_4() { return cSouthEnumLiteralDeclaration_4; }

		//"s"
		public Keyword getSouthSKeyword_4_0() { return cSouthSKeyword_4_0; }

		//southwest="sw"
		public EnumLiteralDeclaration getSouthwestEnumLiteralDeclaration_5() { return cSouthwestEnumLiteralDeclaration_5; }

		//"sw"
		public Keyword getSouthwestSwKeyword_5_0() { return cSouthwestSwKeyword_5_0; }

		//west="w"
		public EnumLiteralDeclaration getWestEnumLiteralDeclaration_6() { return cWestEnumLiteralDeclaration_6; }

		//"w"
		public Keyword getWestWKeyword_6_0() { return cWestWKeyword_6_0; }

		//northwest="nw"
		public EnumLiteralDeclaration getNorthwestEnumLiteralDeclaration_7() { return cNorthwestEnumLiteralDeclaration_7; }

		//"nw"
		public Keyword getNorthwestNwKeyword_7_0() { return cNorthwestNwKeyword_7_0; }
	}
	
	private GraphvizModelElements pGraphvizModel;
	private MainGraphElements pMainGraph;
	private StmtElements pStmt;
	private EdgeStmtNodeElements pEdgeStmtNode;
	private EdgeStmtSubgraphElements pEdgeStmtSubgraph;
	private NodeStmtElements pNodeStmt;
	private AttributeElements pAttribute;
	private AttrStmtElements pAttrStmt;
	private AttrListElements pAttrList;
	private AListElements pAList;
	private SubgraphElements pSubgraph;
	private EdgeRhsElements pEdgeRhs;
	private EdgeRhsNodeElements pEdgeRhsNode;
	private EdgeRhsSubgraphElements pEdgeRhsSubgraph;
	private NodeIdElements pNodeId;
	private EdgeOpElements unknownRuleEdgeOp;
	private GraphTypeElements unknownRuleGraphType;
	private AttributeTypeElements unknownRuleAttributeType;
	private CompassPtElements unknownRuleCompassPt;
	private TerminalRule tDOT_ID;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DotGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GraphvizModel:
	//	graphs+=MainGraph*;
	public GraphvizModelElements getGraphvizModelAccess() {
		return (pGraphvizModel != null) ? pGraphvizModel : (pGraphvizModel = new GraphvizModelElements());
	}
	
	public ParserRule getGraphvizModelRule() {
		return getGraphvizModelAccess().getRule();
	}

	//MainGraph:
	//	strict?="strict"? type=GraphType name=DOT_ID? "{" stmts+=Stmt* "}";
	public MainGraphElements getMainGraphAccess() {
		return (pMainGraph != null) ? pMainGraph : (pMainGraph = new MainGraphElements());
	}
	
	public ParserRule getMainGraphRule() {
		return getMainGraphAccess().getRule();
	}

	//Stmt:
	//	(Attribute | EdgeStmtNode | EdgeStmtSubgraph | NodeStmt | AttrStmt | Subgraph) ";"?;
	public StmtElements getStmtAccess() {
		return (pStmt != null) ? pStmt : (pStmt = new StmtElements());
	}
	
	public ParserRule getStmtRule() {
		return getStmtAccess().getRule();
	}

	//EdgeStmtNode:
	//	node_id=NodeId edgeRHS+=EdgeRhs+ attributes+=AttrList*;
	public EdgeStmtNodeElements getEdgeStmtNodeAccess() {
		return (pEdgeStmtNode != null) ? pEdgeStmtNode : (pEdgeStmtNode = new EdgeStmtNodeElements());
	}
	
	public ParserRule getEdgeStmtNodeRule() {
		return getEdgeStmtNodeAccess().getRule();
	}

	//EdgeStmtSubgraph:
	//	subgraph=Subgraph edgeRHS=EdgeRhs+ attributes+=AttrList*;
	public EdgeStmtSubgraphElements getEdgeStmtSubgraphAccess() {
		return (pEdgeStmtSubgraph != null) ? pEdgeStmtSubgraph : (pEdgeStmtSubgraph = new EdgeStmtSubgraphElements());
	}
	
	public ParserRule getEdgeStmtSubgraphRule() {
		return getEdgeStmtSubgraphAccess().getRule();
	}

	//NodeStmt:
	//	name=DOT_ID attributes+=AttrList*;
	public NodeStmtElements getNodeStmtAccess() {
		return (pNodeStmt != null) ? pNodeStmt : (pNodeStmt = new NodeStmtElements());
	}
	
	public ParserRule getNodeStmtRule() {
		return getNodeStmtAccess().getRule();
	}

	////NodeStmt     :  name=DOT_ID (port=Port)? (attributes+=AttrList)*; // see FIXME for port
	//Attribute:
	//	name=DOT_ID "=" value=DOT_ID;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//AttrStmt:
	//	type=AttributeType attributes+=AttrList+;
	public AttrStmtElements getAttrStmtAccess() {
		return (pAttrStmt != null) ? pAttrStmt : (pAttrStmt = new AttrStmtElements());
	}
	
	public ParserRule getAttrStmtRule() {
		return getAttrStmtAccess().getRule();
	}

	//AttrList:
	//	"[" a_list+=AList* "]";
	public AttrListElements getAttrListAccess() {
		return (pAttrList != null) ? pAttrList : (pAttrList = new AttrListElements());
	}
	
	public ParserRule getAttrListRule() {
		return getAttrListAccess().getRule();
	}

	//AList:
	//	name=DOT_ID ("=" value=DOT_ID)? ","?;
	public AListElements getAListAccess() {
		return (pAList != null) ? pAList : (pAList = new AListElements());
	}
	
	public ParserRule getAListRule() {
		return getAListAccess().getRule();
	}

	//Subgraph:
	//	("subgraph" name=DOT_ID?)? "{" stmts+=Stmt* "}";
	public SubgraphElements getSubgraphAccess() {
		return (pSubgraph != null) ? pSubgraph : (pSubgraph = new SubgraphElements());
	}
	
	public ParserRule getSubgraphRule() {
		return getSubgraphAccess().getRule();
	}

	////FIXME: Generated portImpl class has compilation errors with Helios Xtext
	////Port : ":" name=DOT_ID ( ":" compass_pt=CompassPt )? | ":" compass_pt=CompassPt;
	//EdgeRhs:
	//	EdgeRhsNode | EdgeRhsSubgraph;
	public EdgeRhsElements getEdgeRhsAccess() {
		return (pEdgeRhs != null) ? pEdgeRhs : (pEdgeRhs = new EdgeRhsElements());
	}
	
	public ParserRule getEdgeRhsRule() {
		return getEdgeRhsAccess().getRule();
	}

	//EdgeRhsNode:
	//	op=EdgeOp node=NodeId;
	public EdgeRhsNodeElements getEdgeRhsNodeAccess() {
		return (pEdgeRhsNode != null) ? pEdgeRhsNode : (pEdgeRhsNode = new EdgeRhsNodeElements());
	}
	
	public ParserRule getEdgeRhsNodeRule() {
		return getEdgeRhsNodeAccess().getRule();
	}

	//EdgeRhsSubgraph:
	//	op=EdgeOp subgraph=Subgraph;
	public EdgeRhsSubgraphElements getEdgeRhsSubgraphAccess() {
		return (pEdgeRhsSubgraph != null) ? pEdgeRhsSubgraph : (pEdgeRhsSubgraph = new EdgeRhsSubgraphElements());
	}
	
	public ParserRule getEdgeRhsSubgraphRule() {
		return getEdgeRhsSubgraphAccess().getRule();
	}

	////NodeId  : name=DOT_ID (port=Port)?; // see FIXME for port
	//NodeId:
	//	name=DOT_ID;
	public NodeIdElements getNodeIdAccess() {
		return (pNodeId != null) ? pNodeId : (pNodeId = new NodeIdElements());
	}
	
	public ParserRule getNodeIdRule() {
		return getNodeIdAccess().getRule();
	}

	//enum EdgeOp:
	//	directed="->" | undirected="--";
	public EdgeOpElements getEdgeOpAccess() {
		return (unknownRuleEdgeOp != null) ? unknownRuleEdgeOp : (unknownRuleEdgeOp = new EdgeOpElements());
	}
	
	public EnumRule getEdgeOpRule() {
		return getEdgeOpAccess().getRule();
	}

	//enum GraphType:
	//	graph | digraph;
	public GraphTypeElements getGraphTypeAccess() {
		return (unknownRuleGraphType != null) ? unknownRuleGraphType : (unknownRuleGraphType = new GraphTypeElements());
	}
	
	public EnumRule getGraphTypeRule() {
		return getGraphTypeAccess().getRule();
	}

	//enum AttributeType:
	//	graph | node | edge;
	public AttributeTypeElements getAttributeTypeAccess() {
		return (unknownRuleAttributeType != null) ? unknownRuleAttributeType : (unknownRuleAttributeType = new AttributeTypeElements());
	}
	
	public EnumRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//enum CompassPt:
	//	north="n" | northeast="ne" | east="e" | southeast="se" | south="s" | southwest="sw" | west="w" | northwest="nw";
	public CompassPtElements getCompassPtAccess() {
		return (unknownRuleCompassPt != null) ? unknownRuleCompassPt : (unknownRuleCompassPt = new CompassPtElements());
	}
	
	public EnumRule getCompassPtRule() {
		return getCompassPtAccess().getRule();
	}

	//terminal DOT_ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")* | "\"" ("\\" ("b" | "t" | "n" | "f" | "r" |
	//	"\"" | "\'" | "\\") | !"\"")* "\"" | "-"? ("." "0".."9"+ | "0".."9"+ ("." "0".."9"*)?);
	public TerminalRule getDOT_IDRule() {
		return (tDOT_ID != null) ? tDOT_ID : (tDOT_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT_ID"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
