/*
* generated by Xtext
*/
grammar InternalDot;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.zest.internal.dot.parser.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.zest.internal.dot.parser.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.zest.internal.dot.parser.services.DotGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private DotGrammarAccess grammarAccess;
 	
    public InternalDotParser(TokenStream input, DotGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "GraphvizModel";	
   	}
   	
   	@Override
   	protected DotGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleGraphvizModel
entryRuleGraphvizModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGraphvizModelRule()); }
	 iv_ruleGraphvizModel=ruleGraphvizModel 
	 { $current=$iv_ruleGraphvizModel.current; } 
	 EOF 
;

// Rule GraphvizModel
ruleGraphvizModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getGraphvizModelAccess().getGraphsMainGraphParserRuleCall_0()); 
	    }
		lv_graphs_0_0=ruleMainGraph		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGraphvizModelRule());
	        }
       		add(
       			$current, 
       			"graphs",
        		lv_graphs_0_0, 
        		"MainGraph");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleMainGraph
entryRuleMainGraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainGraphRule()); }
	 iv_ruleMainGraph=ruleMainGraph 
	 { $current=$iv_ruleMainGraph.current; } 
	 EOF 
;

// Rule MainGraph
ruleMainGraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_strict_0_0=	'strict' 
    {
        newLeafNode(lv_strict_0_0, grammarAccess.getMainGraphAccess().getStrictStrictKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMainGraphRule());
	        }
       		setWithLastConsumed($current, "strict", true, "strict");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMainGraphAccess().getTypeGraphTypeEnumRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleGraphType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainGraphRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"GraphType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_DOT_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getMainGraphAccess().getNameDOT_IDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMainGraphRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"DOT_ID");
	    }

)
)?	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMainGraphAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainGraphAccess().getStmtsStmtParserRuleCall_4_0()); 
	    }
		lv_stmts_4_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainGraphRule());
	        }
       		add(
       			$current, 
       			"stmts",
        		lv_stmts_4_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMainGraphAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleStmt
entryRuleStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStmtRule()); }
	 iv_ruleStmt=ruleStmt 
	 { $current=$iv_ruleStmt.current; } 
	 EOF 
;

// Rule Stmt
ruleStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getAttributeParserRuleCall_0_0()); 
    }
    this_Attribute_0=ruleAttribute
    { 
        $current = $this_Attribute_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getEdgeStmtNodeParserRuleCall_0_1()); 
    }
    this_EdgeStmtNode_1=ruleEdgeStmtNode
    { 
        $current = $this_EdgeStmtNode_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getEdgeStmtSubgraphParserRuleCall_0_2()); 
    }
    this_EdgeStmtSubgraph_2=ruleEdgeStmtSubgraph
    { 
        $current = $this_EdgeStmtSubgraph_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getNodeStmtParserRuleCall_0_3()); 
    }
    this_NodeStmt_3=ruleNodeStmt
    { 
        $current = $this_NodeStmt_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getAttrStmtParserRuleCall_0_4()); 
    }
    this_AttrStmt_4=ruleAttrStmt
    { 
        $current = $this_AttrStmt_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStmtAccess().getSubgraphParserRuleCall_0_5()); 
    }
    this_Subgraph_5=ruleSubgraph
    { 
        $current = $this_Subgraph_5.current; 
        afterParserOrEnumRuleCall();
    }
)(	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStmtAccess().getSemicolonKeyword_1());
    }
)?)
;





// Entry rule entryRuleEdgeStmtNode
entryRuleEdgeStmtNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEdgeStmtNodeRule()); }
	 iv_ruleEdgeStmtNode=ruleEdgeStmtNode 
	 { $current=$iv_ruleEdgeStmtNode.current; } 
	 EOF 
;

// Rule EdgeStmtNode
ruleEdgeStmtNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeStmtNodeAccess().getNode_idNodeIdParserRuleCall_0_0()); 
	    }
		lv_node_id_0_0=ruleNodeId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeStmtNodeRule());
	        }
       		set(
       			$current, 
       			"node_id",
        		lv_node_id_0_0, 
        		"NodeId");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeStmtNodeAccess().getEdgeRHSEdgeRhsParserRuleCall_1_0()); 
	    }
		lv_edgeRHS_1_0=ruleEdgeRhs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeStmtNodeRule());
	        }
       		add(
       			$current, 
       			"edgeRHS",
        		lv_edgeRHS_1_0, 
        		"EdgeRhs");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeStmtNodeAccess().getAttributesAttrListParserRuleCall_2_0()); 
	    }
		lv_attributes_2_0=ruleAttrList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeStmtNodeRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_2_0, 
        		"AttrList");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleEdgeStmtSubgraph
entryRuleEdgeStmtSubgraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEdgeStmtSubgraphRule()); }
	 iv_ruleEdgeStmtSubgraph=ruleEdgeStmtSubgraph 
	 { $current=$iv_ruleEdgeStmtSubgraph.current; } 
	 EOF 
;

// Rule EdgeStmtSubgraph
ruleEdgeStmtSubgraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeStmtSubgraphAccess().getSubgraphSubgraphParserRuleCall_0_0()); 
	    }
		lv_subgraph_0_0=ruleSubgraph		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeStmtSubgraphRule());
	        }
       		set(
       			$current, 
       			"subgraph",
        		lv_subgraph_0_0, 
        		"Subgraph");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeStmtSubgraphAccess().getEdgeRHSEdgeRhsParserRuleCall_1_0()); 
	    }
		lv_edgeRHS_1_0=ruleEdgeRhs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeStmtSubgraphRule());
	        }
       		set(
       			$current, 
       			"edgeRHS",
        		lv_edgeRHS_1_0, 
        		"EdgeRhs");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeStmtSubgraphAccess().getAttributesAttrListParserRuleCall_2_0()); 
	    }
		lv_attributes_2_0=ruleAttrList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeStmtSubgraphRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_2_0, 
        		"AttrList");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleNodeStmt
entryRuleNodeStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeStmtRule()); }
	 iv_ruleNodeStmt=ruleNodeStmt 
	 { $current=$iv_ruleNodeStmt.current; } 
	 EOF 
;

// Rule NodeStmt
ruleNodeStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_DOT_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getNodeStmtAccess().getNameDOT_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeStmtRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"DOT_ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeStmtAccess().getAttributesAttrListParserRuleCall_1_0()); 
	    }
		lv_attributes_1_0=ruleAttrList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeStmtRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_1_0, 
        		"AttrList");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_DOT_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameDOT_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"DOT_ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_DOT_ID
		{
			newLeafNode(lv_value_2_0, grammarAccess.getAttributeAccess().getValueDOT_IDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"DOT_ID");
	    }

)
))
;





// Entry rule entryRuleAttrStmt
entryRuleAttrStmt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttrStmtRule()); }
	 iv_ruleAttrStmt=ruleAttrStmt 
	 { $current=$iv_ruleAttrStmt.current; } 
	 EOF 
;

// Rule AttrStmt
ruleAttrStmt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttrStmtAccess().getTypeAttributeTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleAttributeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrStmtRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"AttributeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrStmtAccess().getAttributesAttrListParserRuleCall_1_0()); 
	    }
		lv_attributes_1_0=ruleAttrList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrStmtRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_1_0, 
        		"AttrList");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleAttrList
entryRuleAttrList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttrListRule()); }
	 iv_ruleAttrList=ruleAttrList 
	 { $current=$iv_ruleAttrList.current; } 
	 EOF 
;

// Rule AttrList
ruleAttrList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttrListAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrListAccess().getA_listAListParserRuleCall_1_0()); 
	    }
		lv_a_list_1_0=ruleAList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrListRule());
	        }
       		add(
       			$current, 
       			"a_list",
        		lv_a_list_1_0, 
        		"AList");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttrListAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleAList
entryRuleAList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAListRule()); }
	 iv_ruleAList=ruleAList 
	 { $current=$iv_ruleAList.current; } 
	 EOF 
;

// Rule AList
ruleAList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_DOT_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAListAccess().getNameDOT_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAListRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"DOT_ID");
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAListAccess().getEqualsSignKeyword_1_0());
    }
(
(
		lv_value_2_0=RULE_DOT_ID
		{
			newLeafNode(lv_value_2_0, grammarAccess.getAListAccess().getValueDOT_IDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAListRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"DOT_ID");
	    }

)
))?(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAListAccess().getCommaKeyword_2());
    }
)?)
;





// Entry rule entryRuleSubgraph
entryRuleSubgraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubgraphRule()); }
	 iv_ruleSubgraph=ruleSubgraph 
	 { $current=$iv_ruleSubgraph.current; } 
	 EOF 
;

// Rule Subgraph
ruleSubgraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='subgraph' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubgraphAccess().getSubgraphKeyword_0_0());
    }
(
(
		lv_name_1_0=RULE_DOT_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSubgraphAccess().getNameDOT_IDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubgraphRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"DOT_ID");
	    }

)
)?)?	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubgraphAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubgraphAccess().getStmtsStmtParserRuleCall_2_0()); 
	    }
		lv_stmts_3_0=ruleStmt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubgraphRule());
	        }
       		add(
       			$current, 
       			"stmts",
        		lv_stmts_3_0, 
        		"Stmt");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSubgraphAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleEdgeRhs
entryRuleEdgeRhs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEdgeRhsRule()); }
	 iv_ruleEdgeRhs=ruleEdgeRhs 
	 { $current=$iv_ruleEdgeRhs.current; } 
	 EOF 
;

// Rule EdgeRhs
ruleEdgeRhs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEdgeRhsAccess().getEdgeRhsNodeParserRuleCall_0()); 
    }
    this_EdgeRhsNode_0=ruleEdgeRhsNode
    { 
        $current = $this_EdgeRhsNode_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEdgeRhsAccess().getEdgeRhsSubgraphParserRuleCall_1()); 
    }
    this_EdgeRhsSubgraph_1=ruleEdgeRhsSubgraph
    { 
        $current = $this_EdgeRhsSubgraph_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEdgeRhsNode
entryRuleEdgeRhsNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEdgeRhsNodeRule()); }
	 iv_ruleEdgeRhsNode=ruleEdgeRhsNode 
	 { $current=$iv_ruleEdgeRhsNode.current; } 
	 EOF 
;

// Rule EdgeRhsNode
ruleEdgeRhsNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeRhsNodeAccess().getOpEdgeOpEnumRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleEdgeOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRhsNodeRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"EdgeOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeRhsNodeAccess().getNodeNodeIdParserRuleCall_1_0()); 
	    }
		lv_node_1_0=ruleNodeId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRhsNodeRule());
	        }
       		set(
       			$current, 
       			"node",
        		lv_node_1_0, 
        		"NodeId");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEdgeRhsSubgraph
entryRuleEdgeRhsSubgraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEdgeRhsSubgraphRule()); }
	 iv_ruleEdgeRhsSubgraph=ruleEdgeRhsSubgraph 
	 { $current=$iv_ruleEdgeRhsSubgraph.current; } 
	 EOF 
;

// Rule EdgeRhsSubgraph
ruleEdgeRhsSubgraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeRhsSubgraphAccess().getOpEdgeOpEnumRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleEdgeOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRhsSubgraphRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"EdgeOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeRhsSubgraphAccess().getSubgraphSubgraphParserRuleCall_1_0()); 
	    }
		lv_subgraph_1_0=ruleSubgraph		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRhsSubgraphRule());
	        }
       		set(
       			$current, 
       			"subgraph",
        		lv_subgraph_1_0, 
        		"Subgraph");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNodeId
entryRuleNodeId returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeIdRule()); }
	 iv_ruleNodeId=ruleNodeId 
	 { $current=$iv_ruleNodeId.current; } 
	 EOF 
;

// Rule NodeId
ruleNodeId returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_DOT_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getNodeIdAccess().getNameDOT_IDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeIdRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"DOT_ID");
	    }

)
)
;





// Rule EdgeOp
ruleEdgeOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='->' 
	{
        $current = grammarAccess.getEdgeOpAccess().getDirectedEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEdgeOpAccess().getDirectedEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='--' 
	{
        $current = grammarAccess.getEdgeOpAccess().getUndirectedEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEdgeOpAccess().getUndirectedEnumLiteralDeclaration_1()); 
    }
));



// Rule GraphType
ruleGraphType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='graph' 
	{
        $current = grammarAccess.getGraphTypeAccess().getGraphEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGraphTypeAccess().getGraphEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='digraph' 
	{
        $current = grammarAccess.getGraphTypeAccess().getDigraphEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGraphTypeAccess().getDigraphEnumLiteralDeclaration_1()); 
    }
));



// Rule AttributeType
ruleAttributeType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='graph' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getGraphEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAttributeTypeAccess().getGraphEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='node' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getNodeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAttributeTypeAccess().getNodeEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='edge' 
	{
        $current = grammarAccess.getAttributeTypeAccess().getEdgeEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAttributeTypeAccess().getEdgeEnumLiteralDeclaration_2()); 
    }
));





RULE_DOT_ID : ('^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*|'"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~('"'))* '"'|'-'? ('.' ('0'..'9')+|('0'..'9')+ ('.' ('0'..'9')*)?));

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


